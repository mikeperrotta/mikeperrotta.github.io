{"version":3,"sources":["assets/images/rocky-morning.jpg","assets/images/starry-night.jpg","core/styles/Colors.js","containers/app/AppHeader.js","core/router/Routes.js","components/layout/PageSection.js","containers/intro/IntroSection.js","containers/app/AppHomePage.js","containers/app/AppContainer.js","serviceWorker.js","index.js","core/router/RouterHistory.js"],"names":["module","exports","NEUTRALS","Header","styled","div","LinkToHome","Link","Menu","MenuInternalLink","NavLink","AppHeader","to","activeStyle","fontWeight","PageSectionOuterWrapper","section","PageSectionInnerWrapper","PageSectionBackgroundWrapper","props","bgColor","bgImage","bgSize","css","applyBgStyles","PageSection","children","defaultProps","undefined","Content","IntroSection","RockyMorning","AppHomePage","AppContainer","component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","routerHistory","createHistory","APP_ROOT_NODE","document","getElementById","ReactDOM","render","history","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,2C,uDCA3CD,EAAOC,QAAU,IAA0B,0C,oHCA9BC,EAEH,UAFGA,EAGJ,O,0iCCIT,IAAMC,EAASC,IAAOC,IAAV,KAaNC,EAAaF,YAAOG,IAAPH,CAAH,IAELF,GAeLM,EAAOJ,IAAOC,IAAV,KASJI,EAAmBL,YAAOM,IAAPN,CAAH,IACXF,EAKEA,GAyBES,EApBG,kBAChB,kBAACR,EAAD,KACE,kBAACG,EAAD,CAAYM,GC3DI,KD2DhB,iBAGA,kBAACJ,EAAD,KACE,kBAACC,EAAD,CACII,YAAa,CAAEC,WAAY,OAC3BF,GChEe,cD8DnB,aAKA,kBAACH,EAAD,CACII,YAAa,CAAEC,WAAY,OAC3BF,GCpEW,UDkEf,Y,ygCEjEN,IAqBaG,EAA0BX,IAAOY,QAAV,KAQvBC,EAA0Bb,IAAOC,IAAV,KAc9Ba,EAA+Bd,IAAOC,IAAV,KAI9B,SAACc,GAAD,OA/CkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACzC,OAAID,EACKE,YAAP,IAC0BF,EAGLC,GAAU,SAG7BF,EACKG,YAAP,IACsBH,EACDE,GAAU,QAG1BC,YAAP,KAgCaC,CAAcL,MAGvBM,EAAc,SAAC,GAAD,IAClBL,EADkB,EAClBA,QACAC,EAFkB,EAElBA,QACAC,EAHkB,EAGlBA,OACAI,EAJkB,EAIlBA,SAJkB,OAMlB,kBAACX,EAAD,KACE,kBAACG,EAAD,CAA8BE,QAASA,EAASC,QAASA,EAASC,OAAQA,IAC1E,kBAACL,EAAD,KACIS,KAKRD,EAAYE,aAAe,CACzBP,aAASQ,EACTP,aAASO,EACTN,YAAQM,GAGKH,Q,2aCjEf,IAAMI,EAAUzB,IAAOC,IAAV,KAyCEyB,EARM,kBACnB,kBAAC,EAAD,CAAaT,QAASU,KACpB,kBAAC,EAAD,MACA,kBAACF,EAAD,QClCWG,EANK,kBAClB,oCACE,kBAAC,EAAD,QCKWC,EANM,kBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAWF,MCKFG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ufCRN,IAAMC,EAAcC,YAAH,KA0BXC,EChCGC,cDiCHC,EAAgBC,SAASC,eAAe,OAE1CF,GACFG,IAASC,OACP,kBAAC,IAAD,CAAQC,QAASP,GACf,kBAAC,EAAD,MACA,kBAACF,EAAD,OAEFI,GDoFE,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.713f33bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rocky-morning.b64114c0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starry-night.5e9ee8b2.jpg\";","export const NEUTRALS = {\n  BLACK: '#000',\n  GRAY01: '#4d4d4d',\n  WHITE: '#fff',\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link, NavLink } from 'react-router-dom';\n\nimport { NEUTRALS } from '../../core/styles/Colors';\nimport * as Routes from '../../core/router/Routes';\n\nconst Header = styled.div`\n  display: flex;\n  flex: 1 0 auto;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin-top: 30px;\n\n  @media only screen and (min-width: 768px) {\n    align-items: center;\n    flex-direction: row;\n  }\n`;\n\nconst LinkToHome = styled(Link)`\n  align-items: center;\n  color: ${NEUTRALS.WHITE};\n  display: flex;\n  font-size: 24px;\n  font-weight: semi-bold;\n  letter-spacing: 4px;\n  line-height: 1.2;\n  margin-top: 0;\n  text-align: left;\n  text-decoration: none;\n\n  @media only screen and (min-width: 768px) {\n    font-size: 40px;\n  }\n`;\n\nconst Menu = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 18px;\n  font-weight: semi-bold;\n  justify-content: space-between;\n  margin-left: 60px;\n`;\n\nconst MenuInternalLink = styled(NavLink)`\n  color: ${NEUTRALS.WHITE};\n  margin-right: 30px;\n  text-decoration: none;\n\n  &:hover {\n    color: ${NEUTRALS.GRAY01};\n    cursor: pointer;\n  }\n`;\n\nconst AppHeader = () => (\n  <Header>\n    <LinkToHome to={Routes.ROOT}>\n      MIKE PERROTTA\n    </LinkToHome>\n    <Menu>\n      <MenuInternalLink\n          activeStyle={{ fontWeight: '600' }}\n          to={Routes.PORTFOLIO}>\n        portfolio\n      </MenuInternalLink>\n      <MenuInternalLink\n          activeStyle={{ fontWeight: '600' }}\n          to={Routes.ABOUT}>\n        about\n      </MenuInternalLink>\n    </Menu>\n  </Header>\n);\n\nexport default AppHeader;\n","export const ROOT = '/';\nexport const PORTFOLIO = '/portfolio';\nexport const ABOUT = '/about';\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst applyBgStyles = ({ bgColor, bgImage, bgSize }) => {\n  if (bgImage) {\n    return css`\n      background-image: url(${bgImage});\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: ${bgSize || 'cover'};\n    `;\n  }\n  if (bgColor) {\n    return css`\n      background-color: ${bgColor};\n      background-size: ${bgSize || 'auto'};\n    `;\n  }\n  return css`\n    background: none;\n  `;\n};\n\n// \"min-width\" because this container needs to stretch to 100% of the width of the window\nexport const PageSectionOuterWrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  min-width: 100%;\n  position: relative;\n`;\n\n// \"padding\" adds space between the window edge and the content when the window size is really small\nexport const PageSectionInnerWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: 0 30px;\n  position: relative;\n  width: 100%;\n\n  @media only screen and (min-width: 768px) {\n    align-items: stretch;\n    width: 85%;\n  }\n`;\n\nconst PageSectionBackgroundWrapper = styled.div`\n  height: 100%;\n  position: absolute;\n  width: 100%;\n  ${(props) => applyBgStyles(props)}\n`;\n\nconst PageSection = ({\n  bgColor,\n  bgImage,\n  bgSize,\n  children\n}) => (\n  <PageSectionOuterWrapper>\n    <PageSectionBackgroundWrapper bgColor={bgColor} bgImage={bgImage} bgSize={bgSize} />\n    <PageSectionInnerWrapper>\n      { children }\n    </PageSectionInnerWrapper>\n  </PageSectionOuterWrapper>\n);\n\nPageSection.defaultProps = {\n  bgColor: undefined,\n  bgImage: undefined,\n  bgSize: undefined\n};\n\nexport default PageSection;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport AppHeader from '../app/AppHeader';\nimport PageSection from '../../components/layout/PageSection';\nimport StarryNight from '../../assets/images/starry-night.jpg';\nimport RockyMorning from '../../assets/images/rocky-morning.jpg';\n\nconst Content = styled.div`\n  color: #ffffff;\n  align-items: center;\n  display: block;\n  flex-direction: column;\n  margin: 50px auto 100px auto;\n  max-width: 100%;\n  text-align: center;\n\n  @media only screen and (min-width: 768px) {\n    max-width: 75%;\n  }\n\n  @media only screen and (min-width: 1020px) {\n    margin: 210px auto 211px auto;\n  }\n`;\n\n// const Title = styled.div`\n//   color: #ffffff;\n//   font-size: 25px;\n//   font-weight: 600;\n//   line-height: 1.2;\n//   margin-bottom: 20px;\n//   margin-top: 0;\n//   text-align: left;\n//\n//   @media only screen and (min-width: 768px) {\n//     font-size: 40px;\n//     text-align: left;\n//   }\n// `;\n\nconst IntroSection = () => (\n  <PageSection bgImage={RockyMorning}>\n    <AppHeader />\n    <Content>\n    </Content>\n  </PageSection>\n);\n\nexport default IntroSection;\n","import React from 'react';\n\nimport IntroSection from '../intro/IntroSection';\n\nconst AppHomePage = () => (\n  <>\n    <IntroSection />\n  </>\n);\n\nexport default AppHomePage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport AppHomePage from './AppHomePage';\n\nconst AppContainer = () => (\n  <Switch>\n    <Route component={AppHomePage} />\n  </Switch>\n);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nimport initializeRouterHistory from './core/router/RouterHistory';\n\nimport AppContainer from './containers/app/AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    background-color: #ffffff;\n    font-family: 'Muli', sans-serif;\n    height: 100%;\n    line-height: normal;\n    margin: 0;\n    width: 100%;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  #app {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst routerHistory = initializeRouterHistory();\nconst APP_ROOT_NODE = document.getElementById('app');\n\nif (APP_ROOT_NODE) {\n  ReactDOM.render(\n    <Router history={routerHistory}>\n      <AppContainer />\n      <GlobalStyle />\n    </Router>,\n    APP_ROOT_NODE\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createHashHistory as createHistory } from 'history';\n\nexport default function initializeRouterHistory() {\n\n  return createHistory();\n}\n"],"sourceRoot":""}