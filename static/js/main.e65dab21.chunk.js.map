{"version":3,"sources":["assets/images/rocky-morning.jpg","core/styles/Colors.js","containers/app/AppHomePageMenu.js","core/router/Routes.js","components/layout/PageSection.js","containers/intro/IntroSection.js","containers/portfolio/ProjectSquare.js","containers/portfolio/PortfolioSection.js","containers/app/AppHomePage.js","containers/app/AppContainer.js","serviceWorker.js","index.js"],"names":["module","exports","NEUTRALS","Menu","styled","div","getLinkStyles","css","MenuLink","NavLink","MenuHashLink","NavHashLink","AppHeader","to","smooth","PageSectionOuterWrapper","section","props","fullScreen","PageSectionInnerWrapper","PageSectionBackgroundWrapper","bgColor","bgImage","bgSize","blur","flipHorizontal","transform","applyBgStyles","PageSection","children","defaultProps","undefined","Content","TitleText","SubtitleLine","SubtitleText","IntroSection","RockyMorning","AppHomePageMenu","ComingSoonText","PortfolioSection","id","AppHomePage","AppContainer","component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","APP_ROOT_NODE","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e65dab21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rocky-morning.b64114c0.jpg\";","export const NEUTRALS = {\n  BLACK: '#000',\n  LIGHT_GRAY: '#F1EFEB',\n  DARK_GRAY: '#282D2B',\n  WHITE: '#fff',\n};\n","// @flow\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { NavHashLink } from 'react-router-hash-link';\n\nimport { NEUTRALS } from '../../core/styles/Colors';\nimport * as Routes from '../../core/router/Routes';\n\nconst Menu = styled.div`\n  align-items: center;\n  background-color: ${NEUTRALS.DARK_GRAY};\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  padding: 12px;\n  position: absolute;\n  width: 100%;\n`;\n\nconst getLinkStyles = () => (\n  css`\n    color: ${NEUTRALS.LIGHT_GRAY};\n    font-size: 24px;\n    font-style: normal;\n    font-weight: 200;\n    line-height: 30px;\n    margin: 0px 80px;\n    text-decoration: none;\n\n   &:hover {\n     color: ${NEUTRALS.LIGHT_GRAY};\n     cursor: pointer;\n   }\n  `\n);\n\nconst MenuLink = styled(NavLink)`\n  ${getLinkStyles}\n`;\n\nconst MenuHashLink = styled(NavHashLink)`\n  ${getLinkStyles}\n`;\n\nconst AppHeader = () => (\n  <Menu>\n    <MenuHashLink\n        to={Routes.PORTFOLIO}\n        smooth>\n      projects\n    </MenuHashLink>\n    <MenuLink\n        to={Routes.ABOUT}>\n      about\n    </MenuLink>\n  </Menu>\n);\n\nexport default AppHeader;\n","export const ROOT = '/';\nexport const PORTFOLIO = '/#portfolio';\nexport const ABOUT = '/about';\n","// @flow\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport type { Node } from 'react';\n\nconst applyBgStyles = ({\n  bgColor, bgImage, bgSize, blur, flipHorizontal\n}) => {\n  if (bgImage) {\n    let transform = flipHorizontal ? 'scaleX(-1)' : '';\n    if (blur) {\n      transform += ' scale(1.1)';\n    }\n    return css`\n      background-image: url(${bgImage});\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: ${bgSize || 'cover'};\n      filter: blur(${blur}px);\n      transform: ${transform};\n    `;\n  }\n  if (bgColor) {\n    return css`\n      background-color: ${bgColor};\n      background-size: ${bgSize || 'auto'};\n    `;\n  }\n  return css`\n    background: none;\n  `;\n};\n\n// \"min-width\" because this container needs to stretch to 100% of the width of the window\nexport const PageSectionOuterWrapper = styled.section`\n  display: flex;\n  height: ${(props) => (props.fullScreen ? '100%' : 'auto')}\n  justify-content: center;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n`;\n\n// \"padding\" adds space between the window edge and the content when the window size is really small\nexport const PageSectionInnerWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n\n  @media only screen and (min-width: 768px) {\n    align-items: stretch;\n  }\n`;\n\nconst PageSectionBackgroundWrapper = styled.div`\n  height: 100%;\n  position: absolute;\n  width: 100%;\n  ${(props) => applyBgStyles(props)}\n`;\n\ntype Props = {\n  bgColor ? :string;\n  bgImage ? :string;\n  bgSize ? :string;\n  blur ? :int;\n  children :Node;\n  flipHorizontal ? :boolean;\n  fullScreen ? :boolean;\n};\n\nconst PageSection = ({\n  bgColor,\n  bgImage,\n  bgSize,\n  fullScreen,\n  blur,\n  flipHorizontal,\n  children\n} :Props) => (\n  <PageSectionOuterWrapper fullScreen={fullScreen}>\n    <PageSectionBackgroundWrapper\n        bgColor={bgColor}\n        bgImage={bgImage}\n        bgSize={bgSize}\n        blur={blur}\n        flipHorizontal={flipHorizontal} />\n    <PageSectionInnerWrapper>\n      { children }\n    </PageSectionInnerWrapper>\n  </PageSectionOuterWrapper>\n);\n\nPageSection.defaultProps = {\n  bgColor: undefined,\n  bgImage: undefined,\n  bgSize: undefined,\n  blur: 0,\n  flipHorizontal: false,\n  fullScreen: false,\n};\n\nexport default PageSection;\n","// @flow\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport AppHomePageMenu from '../app/AppHomePageMenu'\nimport PageSection from '../../components/layout/PageSection';\nimport RockyMorning from '../../assets/images/rocky-morning.jpg';\n// import RockyMorning from '../../assets/images/Header Photo.png';\n\nimport { NEUTRALS } from '../../core/styles/Colors';\n\n/* styled components */\nconst Content = styled.div`\n  align-items: center;\n  color: ${NEUTRALS.WHITE};\n  display: block;\n  flex-direction: column;\n  margin: 170px auto 0px auto;\n  max-width: 100%;\n  text-align: center;\n`;\n\nconst TitleText = styled.div`\n  color: ${NEUTRALS.DARK_GRAY};\n  font-family: Muli;\n  font-size: 72px;\n  font-style: normal;\n  font-weight: 200;\n  padding: 0px 50px;\n  text-align: center;\n`;\n\nconst SubtitleLine = styled.div`\n  border: 1px solid ${NEUTRALS.DARK_GRAY};\n  margin: 15px;\n`;\n\nconst SubtitleText = styled.div`\n  color: ${NEUTRALS.DARK_GRAY};\n  font-family: Muli;\n  font-size: 48px;\n  font-style: normal;\n  font-weight: 200;\n  line-height: 60px;\n  text-align: center;\n`;\n\n/* react component */\nconst IntroSection = () => (\n  <PageSection bgImage={RockyMorning} fullScreen blur={6} flipHorizontal>\n    <Content>\n      <TitleText>\n        MIKE PERROTTA\n      </TitleText>\n      <SubtitleLine />\n      <SubtitleText>\n        Scientist, Coder, Writer\n      </SubtitleText>\n    </Content>\n    <AppHomePageMenu />\n  </PageSection>\n);\n\nexport default IntroSection;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { NEUTRALS } from '../../core/styles/Colors';\n\n/* styled components */\nconst SquareWrapper = styled.div`\n  background-color: ${NEUTRALS.LIGHT_GRAY};\n  height: 200px;\n  margin: 10px;\n  width: 200px;\n`;\n\n/* react component */\nconst ProjectSquare = () => (\n  <SquareWrapper />\n);\n\nexport default ProjectSquare;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport PageSection from '../../components/layout/PageSection';\nimport ProjectSquare from './ProjectSquare';\n\nimport { NEUTRALS } from '../../core/styles/Colors';\n\n/* styled components */\nconst Content = styled.div`\n  align-items: center;\n  display: block;\n  flex-direction: column;\n  margin: 50px auto 100px auto;\n  max-width: 100%;\n  text-align: center;\n`;\n\nconst ComingSoonText = styled.div`\n  color: ${NEUTRALS.LIGHT_GRAY};\n  font-family: Muli;\n  font-size: 72px;\n  font-style: normal;\n  font-weight: 200;\n  padding: 250px 50px;\n  text-align: center;\n`;\n\n/* react component */\nconst PortfolioSection = () => (\n  <PageSection bgColor={NEUTRALS.DARK_GRAY}>\n    <Content id=\"portfolio\">\n      <ComingSoonText>\n        Coming Soon\n      </ComingSoonText>\n    </Content>\n  </PageSection>\n);\n\nexport default PortfolioSection;\n","import React from 'react';\n\nimport IntroSection from '../intro/IntroSection';\nimport PortfolioSection from '../portfolio/PortfolioSection';\n\nconst AppHomePage = () => (\n  <>\n    <IntroSection />\n    <PortfolioSection />\n  </>\n);\n\nexport default AppHomePage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport AppHomePage from './AppHomePage';\n\nconst AppContainer = () => (\n  <Switch>\n    <Route component={AppHomePage} />\n  </Switch>\n);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nimport AppContainer from './containers/app/AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    background-color: #ffffff;\n    font-family: 'Muli', sans-serif;\n    height: 100%;\n    line-height: normal;\n    margin: 0;\n    width: 100%;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  #app {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst APP_ROOT_NODE = document.getElementById('app');\n\nif (APP_ROOT_NODE) {\n  ReactDOM.render(\n    <Router>\n      <AppContainer />\n      <GlobalStyle />\n    </Router>,\n    APP_ROOT_NODE\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}